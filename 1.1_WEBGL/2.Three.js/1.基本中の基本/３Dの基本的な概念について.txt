第一章では、基本をすべて学びます。最初のシーンの作成、レンダリング、オブジェクトの追加、適切なマテリアルの選択、テクスチャの追加、すべてをアニメーション化し、さらにそれをオンラインに公開することまで学びます。多くの要素を列挙するので、少し退屈に感じるかもしれませんが、楽しくクリエイティブな部分はすぐにやってきます。

第二章では、多くのクラシックな技術を学びます。たとえば、自分のジオメトリを作成したり、ライトやシャドウを追加したり、3Dオブジェクトとインタラクションしたり、パーティクルを追加したりします。ここで少しエキサイティングになってきます。

第三章では、さらに高度な技術を学び、WebGLやThree.jsから離れて、Blenderを使って自分の3Dモデルを作成する方法を学びます。そうです、このコースではBlenderの使い方も学びます。また、ポートフォリオで使ったライブラリを使って物理を追加する方法も学びます。大規模なプロジェクトでコードをどのように整理するかについても教えます。

第四章では、シェーダーについて話します。シェーダーについて聞いたことがある方は、シェーダーが難しいことを知っているでしょう。シェーダーは難しいですが、WebGLの真の力を引き出す鍵です。最初は不可能に思えることでも、シェーダーを使えば実現可能です。何のことか分からなくても大丈夫です、この章を終えるころにはすべてが理解できるでしょう。

第五章では、ポストプロセッシング、パフォーマンスの最適化、WebGLとHTMLの組み合わせ方など、さらに高度な技術を学びます。

第六章では、Three.js Journeyのホームページにあるシーンのようなシーンを作成する方法を学びます。まったく同じシーンではありませんが、章がとても長く退屈になるため、同じ技術を使っており、この章を終えた後にはどんなシーンでも作成できるようになるでしょう。

最後に、第七章では、ReactアプリケーションでReact Three Fiberを使ってThree.jsを使う方法を学びます。この部分を楽しみにしている方が多いと確信していますし、きっと気に入っていただけると思います。学び、実践する技術の数は膨大です。物理を使ったゲーム、本物のゲームメカニクス、UI、クールなエフェクトを作成します。Reactを知らなくても心配はいりません。Reactの基本を学ぶための4時間のレッスンがボーナスとして用意されています。Three.jsを学ぶために来たのですが、その途中でたくさんの他のことも学べます。


WebGLとは？
WebGL（Web Graphics Library）は、JavaScriptのAPIであり、主にCanvas内で三角形をレンダリングするためのものです。その特徴的な点は、高速な描画能力を持つことです。これは、**訪問者のGPU（グラフィックプロセッシングユニット）**を利用するためです。

WebGLの主な特徴
ブラウザ互換性: ほとんどの現代的なブラウザで動作します。
高速: GPUを使用するため、非常に高速に動作します。
WebGLの基本的な仕組み
三角形: WebGLは基本的に三角形を描画します。2D描画にも使えますが、このコースでは3D体験を三角形で作成します。
並列計算: GPUは膨大な数の並列計算を行います。例えば、1000個の三角形からなる3Dモデルを描画する場合、GPUは各三角形の3点（合計3000点）の位置を計算します。このような並列計算により、効率的なレンダリングが可能です。
1.CANVASの宣言
2.オブジェクトを作成
3.座標、色やその他エフェクトを
4.レンダリング（ペンで書く）
2.三角形を書く

Q1.なぜ三角形
＊2Dと3Dの一番大きな違いって何だろう。それは、Z（奥行きがあるかどうか）である。
点の数を数えてみよう。
1.X
2.Y
3.Z
あ、点が3つ必要や。
2DだったらXとYだけだったけど、3Dだったら3点必要や
1点目と2点目をつなげて
X：5，Y：10
X:20、Y：30
＊＊＊＊＊＊ただの線だね
1点目と2点目と3点目をつなげて
X：5，Y：10　Z:5
X:20、Y：30　Z：10
X:30、Y：40　Z：50
＊奥行きが必要になる。⇒＊＊＊＊＊＊三角形になるやん！
＊3点目がないと、ほかの角度で見たときに線としか見えない。
線だけで3Dを書いてみて？⇒無理⇒三角形をつなげてみる⇒3Dになった！
3Dを表現する最低限のファイルが三角形
2D座標の描画方法の限界
1. 奥行きの表現ができない
2D座標は、X軸とY軸のみを持ちますが、**Z軸（奥行き）**がありません。そのため、奥行きのあるシーンや立体的なオブジェクトを表現することが困難です。

2. 視点の変更が困難
2Dグラフィックスでは、視点の変更が制限されます。視点を変えてオブジェクトを異なる角度から見ることができないため、視覚的な臨場感が欠けます。

3. 光と影の効果が制限される
2Dでは、光源や影の効果をリアルに再現するのが難しいです。3Dグラフィックスでは、光源の位置に基づいてリアルな影やハイライトを計算することができます。

4. インタラクティブ性が限られる
3Dシーンでは、オブジェクトの回転、ズーム、移動など、ユーザーとのインタラクションが求められる場合があります。2Dでは、このような複雑な操作を自然に行うのは困難です。

3Dグラフィックス（WebGLやThree.js）の利点
1. 奥行きのあるシーンの作成
3Dグラフィックスでは、X軸、Y軸、Z軸を使用して、オブジェクトを3次元空間に配置できます。これにより、奥行き感のあるシーンを作成できます。

2. カメラ視点の制御
WebGLやThree.jsを使用すると、カメラの位置や方向を自由に設定でき、シーンを異なる角度から見ることができます。視点の変更により、シーンをよりダイナミックに表現できます。

3. リアルな光と影
3D技術では、光源の位置や性質に基づいてオブジェクトにリアルな影や光の効果を適用できます。これにより、リアリスティックな描画が可能になります。

4. 高度なインタラクション
ユーザーは3Dオブジェクトを操作したり、シーン内を移動したりすることができます。例えば、3Dモデルをドラッグして回転させたり、クリックして情報を表示させたりできます。

＊並列処理で処理される
非同期処理（同時進行）
