☆アニメーションのながれ
＊基本的にそこまでは難しくない。
    1.配列によって初期値を作成する
    2.ラッパーオブジェクトの引数にぶっこむ
    3.1の配列に追加していく
    4.アニメーションフレームを追加していく

    1.配列によって初期値を作成する
        let cameraPosition = [0, 0, 5];  // カメラの初期位置
        let targetPosition = [0, 0, 0];  // カメラの注視点
        const upDirection = [0, 1, 0];   // カメラの上向きの方向
        let objectPosition = [0.0, 0.0, -6.0]; // オブジェクトの初期位置
    2.ラッパーオブジェクトの引数にぶっこむ（例、大体第三引数に入れている気がする）
        mat4.lookAt(viewMatrix, cameraPosition, targetPosition, upDirection);  // カメラの位置とターゲット位置
        mat4.translate(modelViewMatrix, modelViewMatrix, [0.0, 0.0, -6.0]);  // オブジェクトの位置
        mat4.rotateY(modelViewMatrix, modelViewMatrix, rotation);  // Y軸周りに回転
    3.実行する⇒追加する⇒実行する
        function render() {
        drawScene(gl, programInfo, buffers);

        // カメラを動かす（この例ではX軸周りに回転させる）
        const angle = Date.now() * 0.001;  // 時間に応じて角度を変える
        cameraPosition[0] = Math.sin(angle) * 5;  // X軸周りに半径5の円運動
        cameraPosition[2] = Math.cos(angle) * 5;  // Z軸周りに半径5の円運動

    requestAnimationFrame(render);
}

render(); // 描画ループを開始

function drawScene(gl, programInfo, buffers) {
    // Clearing the screen
    gl.clearColor(0.0, 0.0, 0.0, 1.0);  // Clear to black, fully opaque
    gl.clearDepth(1.0);                 // Clear everything
    gl.enable(gl.DEPTH_TEST);           // Enable depth testing
    gl.depthFunc(gl.LEQUAL);            // Near things obscure far things
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    // 視点の設定
    const fieldOfView = 45 * Math.PI / 180;   // 視野角
    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;
    const zNear = 0.1;
    const zFar = 100.0;
    const projectionMatrix = mat4.create();
    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);

    // カメラの位置と向き
    const viewMatrix = mat4.create();
    mat4.lookAt(viewMatrix, cameraPosition, targetPosition, upDirection);  // カメラの位置とターゲット位置

    // モデルの位置と回転
    const modelViewMatrix = mat4.create();
    mat4.translate(modelViewMatrix, modelViewMatrix, [0.0, 0.0, -6.0]);  // オブジェクトの位置
    mat4.rotateY(modelViewMatrix, modelViewMatrix, rotation);  // Y軸周りに回転

    // バッファーの設定（位置と色）
    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);
    gl.vertexAttribPointer(programInfo.attribLocations.vertexPosition, 3, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition);

    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);
    gl.vertexAttribPointer(programInfo.attribLocations.vertexColor, 4, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(programInfo.attribLocations.vertexColor);

    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);

    // ユニフォームの設定（投影行列とモデルビュー行列）
    gl.useProgram(programInfo.program);
    gl.uniformMatrix4fv(programInfo.uniformLocations.projectionMatrix, false, projectionMatrix);
    gl.uniformMatrix4fv(programInfo.uniformLocations.modelViewMatrix, false, modelViewMatrix);

    // 描画命令
    gl.drawElements(gl.TRIANGLES, buffers.numElements, gl.UNSIGNED_SHORT, 0);
}

function render() {
    drawScene(gl, programInfo, buffers);

    // カメラを動かす（この例ではX軸周りに回転させる）
    const angle = Date.now() * 0.001;  // 時間に応じて角度を変える
    cameraPosition[0] = Math.sin(angle) * 5;  // X軸周りに半径5の円運動
    cameraPosition[2] = Math.cos(angle) * 5;  // Z軸周りに半径5の円運動

    requestAnimationFrame(render);
}

render(); // 描画ループを開始