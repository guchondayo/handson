1.サーバーを立ち上げる

2. シーンの作成

シーン (THREE.Scene) は、3D空間でオブジェクトを配置するためのコンテナの役割を果たします。ここでは、オブジェクトやカメラ、ライトなどのすべての要素をシーンに追加します。

javascript
コードをコピーする
const scene = new THREE.Scene();
シーン自体は「オブジェクトそのもの」というよりは、3D空間を管理するための「コンテナ」です。シーンに追加するのはジオメトリやメッシュなどのオブジェクトです。


その通りです！Three.jsのシーン（THREE.Scene）は、オブジェクトがたくさん入っているお道具箱のような役割を果たします。この「お道具箱」にオブジェクトを追加し、整理することで、3Dシーンを効率的に管理し、描画できるようになります。



＊＊単語帳＊＊
★シーン (THREE.Scene):まずこれはレンダリングの時にどのシーンかを登録しなくちゃいけないので、これをしっかり登録しておくこと
★カメラ (THREE.Camera)：どこからの目線、オブジェクトを遠くから見たり、近くから見たり

★オブジェクト類
ジオメトリ (THREE.Geometry など):ジオメトリはオブジェクトの形状を定義(オブジェクトの形)＝ピカチュウの影だと思えばいい
マテリアル (THREE.Material など)：ジオメトリに色や質感、光の反射などを定義します
ジオメトリ＋マテリアルはオブジェクト？
ライト (THREE.Light)
＊// ジオメトリの作成（立方体の例）形＋形以外⇒マッシュしてくっつける⇒シーンに加える
★レンダラー (THREE.WebGLRenderer)：書く　前提としてブラウザに表示しているものは、JSではない。JSは裏でいじっているだけである。
その他多数

★オブジェクトを動かしたいならアニメーションを使え！
// アニメーションループ
1.レンダリングを邪魔しない配慮マン
2.座標がどのくらい動くのかな
3.実際に書いていくレンダリング
＊＊＊わかりずらい表現＊＊＊
Three.jsにおけるカメラの「近クリップ面（near clipping plane）」と「遠クリップ面（far clipping plane）」は、3Dシーンをレンダリングする際に、カメラの視野における表示範囲の前後限界を決める重要な設定です。これらは、カメラの視錐台（Frustum）の一部であり、どのオブジェクトがカメラに表示されるかを決定します。

近クリップ面（near clipping plane）と遠クリップ面（far clipping plane）
近クリップ面（Near Clipping Plane）
役割: カメラからの最も近い距離にあるクリップ面です。この面より手前にあるオブジェクトはカメラに映らず、表示されません。
効果: 近すぎるオブジェクトをレンダリングの対象から除外し、表示されないようにします。通常、これはゼロに非常に近い、または正の値に設定されます。設定値が小さすぎると、深度バッファの精度が低下し、レンダリングアーティファクト（ズレやちらつき）が発生する可能性があります。
遠クリップ面（Far Clipping Plane）
役割: カメラからの最も遠い距離にあるクリップ面です。この面よりも遠いオブジェクトはカメラに映らず、表示されません。
効果: 遠すぎるオブジェクトをレンダリングの対象から除外し、表示されないようにします。通常、これはシーン全体をカバーするのに十分な距離に設定されます。遠すぎると不要なオブジェクトをレンダリングしようとしてパフォーマンスが低下する可能性があります。
図解
カメラの視錐台は、視野（FOV）と、近クリップ面と遠クリップ面の距離によって決まります。視錐台の中に含まれるオブジェクトだけがレンダリングされます。

bash
コードをコピーする
               視野角（FOV）
                / \
               /   \
  カメラ      /     \       遠クリップ面
   O---------/-------\------------------------
            /         \
           /           \
 近クリップ面
近クリップ面：カメラに近すぎて表示されない範囲
遠クリップ面：カメラから遠すぎて表示されない範囲
Three.jsでの設定例
Three.jsでのPerspectiveCameraの設定では、近クリップ面と遠クリップ面を以下のように設定します。

javascript
コードをコピーする
const camera = new THREE.PerspectiveCamera(
    75, // 視野角（FOV）
    window.innerWidth / window.innerHeight, // アスペクト比
    0.1, // 近クリップ面
    1000 // 遠クリップ面
);
上記の例では、0.1が近クリップ面、1000が遠クリップ面に設定されています。これにより、カメラから0.1単位の距離から1000単位の距離までの範囲がレンダリングの対象になります。

重要な考慮点
近クリップ面の設定が小さすぎると、深度バッファの精度が低くなり、レンダリングエラーが発生しやすくなります。
遠クリップ面の設定が大きすぎると、無駄な計算が増え、レンダリングのパフォーマンスが低下することがあります。
参考リンク
Three.js Documentation - PerspectiveCamera
Three.js Fundamentals - Camera
これらの設定は、シーンのレンダリングの効率と視覚的な正確性に大きく影響を与えるため、適切な値を選ぶことが重要です。

つまり大事なのは
個々の設定は
＊被写体が映るか映らないかの設定である
【比較元】
    0.1, // 近クリップ面
    10 // 遠クリップ面
【比較先】
// カメラの作成
camera.position.z = 5;
＊＊以上の例だと、カメラの位置は0.2-0.9以下に設定すべし
⇒この数字より大きいものは表示されないし小さいものも表示されない
const camera = new THREE.PerspectiveCamera(
    75, // 視野角（FOV）数字が低いとちかいしたかいと遠くなった
    window.innerWidth / window.innerHeight, // アスペクト比
    0.1, // 近クリップ面
    10 // 遠クリップ面
);
camera.position.z = 5;



