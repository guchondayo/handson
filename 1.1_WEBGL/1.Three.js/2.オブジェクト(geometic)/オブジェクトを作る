★オブジェクトを作成する
〇前回の復習
1.ジオメトリを作成する
2.マテリアルを作成する
3.メッシュする
4.シーンに加える

★ジオメトリで形を作る方法
// 1.ただの四角形を作る方法
let geometry = new THREE.BoxGeometry(2, 1, 1,2,2,2);
// 2.ただの円を作る方法
    geometry = new THREE.SphereGeometry(1, 32, 32)

★ジオメトリを自作する方法：重要：プログラム上図形は配列でできている
〇手順
    1.空のBufferGeometryを作成する
    ＊バッファって一時的な記憶領域ということは仮置き場とか余裕をもたせるとかそんな感じだよね
    geometry = new THREE.BufferGeometry();
    2.1で作ったバッファ(領域に配列をぶち込む)
    ＊頂点の座標をFloat32Arrayで定義する(別に普通の配列でもいいが、メモリの領域上こちらのほうが望ましい)
const positionsArray = new Float32Array([
    // 前面
    -1, -1,  1,  // 頂点1
     1, -1,  1,  // 頂点2
    -1,  1,  1,  // 頂点3
     1, -1,  1,  // 頂点2
     1,  1,  1,  // 頂点4
    -1,  1,  1,  // 頂点3

    // 背面
    -1, -1, -1,  // 頂点5
    -1,  1, -1,  // 頂点6
     1, -1, -1,  // 頂点7
     1, -1, -1,  // 頂点7
    -1,  1, -1,  // 頂点6
     1,  1, -1,  // 頂点8

    // 上面
    -1,  1,  1,  // 頂点3
     1,  1,  1,  // 頂点4
    -1,  1, -1,  // 頂点6
     1,  1,  1,  // 頂点4
     1,  1, -1,  // 頂点8
    -1,  1, -1,  // 頂点6

    // 下面
    -1, -1,  1,  // 頂点1
    -1, -1, -1,  // 頂点5
     1, -1,  1,  // 頂点2
     1, -1,  1,  // 頂点2
    -1, -1, -1,  // 頂点5
     1, -1, -1,  // 頂点7

    // 左面
    -1, -1,  1,  // 頂点1
    -1,  1,  1,  // 頂点3
    -1, -1, -1,  // 頂点5
    -1, -1, -1,  // 頂点5
    -1,  1,  1,  // 頂点3
    -1,  1, -1,  // 頂点6

    // 右面
     1, -1,  1,  // 頂点2
     1, -1, -1,  // 頂点7
     1,  1,  1,  // 頂点4
     1, -1, -1,  // 頂点7
     1,  1, -1,  // 頂点8
     1,  1,  1,  // 頂点4
]);
    3.2.で作った配列に属性を作る
    ＊重要
    今のままだと2はただの配列・第二引数に3を入れることによって。あ、この配列はXYZを表しているんだなとわかる
    const positionsAttribute = new THREE.BufferAttribute(positionsArray, 3);
    4.3で設定した配列をpositionという属性に加える
    ＊ここで初めて、この配列はジオメトリのpositionとして設定させる
    geometry.setAttribute('position', positionsAttribute);

    ★まとめる
    1.配列をつくる
    2.配列はXYZだよと伝える
    3.空のバッファジオメトリにポジションとして配列を設定する

これも重要：Three.jsでは、シェーダーの設定を自動化し、ユーザーが手軽にカスタムシェーダーを使うためのAPIを提供しています。
本来であれば、こういった処理をやってくれているんだと感謝しないと

★意外とオブジェクトを変更するのは簡単
1.ジオメトリの属性の配列を取得する
2.forなどを使って配列の値を変更する（基本的な配列の要素を変更するやり方でOK）
3.geometry.attributes.position.needsUpdate = trueで更新を反映

1.ジオメトリの属性の配列を取得する
// const positions = geometry.attributes.position.array;
// console.log(positions)
2.forなどを使って配列の値を変更する（基本的な配列の要素を変更するやり方でOK）
// for (let i = 0; i < positions.length; i++) {
//   positions[i] += (Math.random() - 0.5) * 0.2; // 頂点をランダムに移動
// }
3.geometry.attributes.position.needsUpdate = trueで更新を反映
// geometry.attributes.position.needsUpdate = true; // 更新を反映





















★大事なことなので２度書きます。
つまり、すべての図形は三角形で構成されているってこと？
1.最低限
2.組み立てられる
3.平面を表現できる

〇下にも書きましたが、円もめっちゃ細かい三角形でできています！
ChatGPT
はい、基本的に3Dコンピュータグラフィックスの図形（ジオメトリ）はすべて三角形で構成されています。これにはいくつかの理由があります：

★大事な概念：プログラム上図形は配列でできている
三角形は3つの『頂点』で結ばれている。⇒つまり三角形を結ぶ点は頂点っていう。一番上の点じゃないよ！！！！！！！！！！！！！！！！！！
そしてそれは『配列で表現される』

[
  // 前面：三角形２つ
  -1, -0.5,  0.5,   1, -0.5,  0.5,   1,  0.5,  0.5,  -1,  0.5,  0.5,
  // 背面
  -1, -0.5, -0.5,   1, -0.5, -0.5,   1,  0.5, -0.5,  -1,  0.5, -0.5,
  // 上面
  -1,  0.5,  0.5,   1,  0.5,  0.5,   1,  0.5, -0.5,  -1,  0.5, -0.5,
  // 底面
  -1, -0.5,  0.5,   1, -0.5,  0.5,   1, -0.5, -0.5,  -1, -0.5, -0.5,
  // 右側面
   1, -0.5,  0.5,   1, -0.5, -0.5,   1,  0.5, -0.5,   1,  0.5,  0.5,
  // 左側面
  -1, -0.5,  0.5,  -1, -0.5, -0.5,  -1,  0.5, -0.5,  -1,  0.5,  0.5
]

ここの配列の見方
1.配列の1-3番目
    1個目の三角形の一つ目の点を表している。左からX、Y、Zの
2.配列の4-6番目
    2個目の三角形の一つ目の点を表している。左からX、Y、Zの
3.配列の7-9番目
    3個目の三角形の一つ目の点を表している。左からX、Y、Zの
4.配列の10-12番目
    4個目の三角形の一つ目の点を表している。左からX、Y、Zの

コツ
1.4個目の三角形の一つ目の点を表している。左からX、Y、Zの異なる点を最低4つ作るとが三角形ができるよん。
2.四角形を２つ作るときに三角形は以下の2タイプです
＊大事なのは、同じ頂点を使っている場合は省略できる！
const positionsArray = new Float32Array([
    // 前面：三角形2つ
    -1, -0.5,  0.5,   1, -0.5,  0.5,   1,  0.5,  0.5,  // 1番目の三角形
    -1, -0.5,  0.5,   1,  0.5,  0.5,  -1,  0.5,  0.5,  // 2番目の三角形
])

const positionsArray = new Float32Array([
  // 前面：三角形２つ
  -1, -0.5,  0.5,   1, -0.5,  0.5,   1,  0.5,  0.5,  -1,  0.5,  0.5,
])