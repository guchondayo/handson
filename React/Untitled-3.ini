ステップ 2: React で静的なバージョンを作成する(どこから手をつければいいのか？)⇒動かない見た目だけのモックをまず作りましょう(stateは使わない！)
1.インタラクティブな要素はまだ加えず、単にデータモデルから UI をレンダーするバージョンを作成することです。
⇒動かない見た目だけのモックをまず作りましょう
(コンポーネントを作成していく)
＊この時大事なこと
1-1：大きいコンポーネントから作成していく⇒こちらの方が簡単
1-2：小さいコンポーネントから開発していく⇒こちらは大規模開発に向いている
理由:ボタンとか部品は共有しやすいため

落とし穴
この段階では、state の値をまだ使わないでください。それは次のステップで行います！

1.コンポーネント(大小)を開発する
2.propsを作る
3.stateにはじめて変換する
★stateは乱立させてはいけない。
stateはその情報を一括して配列やオブジェクトにしてまとめておく方が良いです。
けど、計算や関数は、それぞれのコンポーネント内で計算したほうがいいよって話だよね

1.配列やオブジェクト
2.計算や関数は、それぞれのコンポーネント内で計算

★stateは乱立させてはいけない。チェックリスト
1.時間が経っても変わらないものですか？ そうであれば、state ではありません。(変わる？変わらない？)
2.親から props 経由で渡されるものですか？ そうであれば、state ではありません。(親で計算して渡すもの？)
3.コンポーネント内にある既存の state や props に基づいて計算可能なデータですか？ そうであれば、それは絶対に state ではありません！(子コンポーネントで計算できる)
残ったものがおそらく state です。
https://ja.react.dev/learn/thinking-in-react


import React, { useState } from 'react';

const Counter = () => {
  // stateの設定
  const [count, setCount] = useState(0);

  // カウントアップの関数
  const incrementCount = () => {
    setCount(count + 1);
  };

  // カウントダウンの関数
  const decrementCount = () => {
    if (count > 0) {
      setCount(count - 1);
    }
  };

  return (
    <div>
      <h2>Counter</h2>
      <p>Count: {count}</p>
      <button onClick={incrementCount}>Increment</button>
      <button onClick={decrementCount}>Decrement</button>
    </div>
  );
};

export default Counter;

ステップ 4：state を保持すべき場所を特定する
