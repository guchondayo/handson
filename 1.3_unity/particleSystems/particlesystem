★Particle Systemオブジェクトの基本
    Particle Systemオブジェクトは、
    Unityにおいて多くの小さなパーティクル（粒子）を使って
    様々なエフェクトを作成するための機能
        Particle Systemオブジェクトは、Unityで様々な視覚効果を作成するための強力なツールです。基本的な設定を理解し、適用することで、リアルな煙、炎、雪、雨などのエフェクトを簡単に作成することができます。
1. Particle Systemの作成方法
    Hierarchyウィンドウで右クリック:
    Hierarchy ウィンドウ内で右クリックします。
    Particle Systemを選択:
    コンテキストメニューが表示されるので、Effects にカーソルを合わせ、その後 Particle System を選択します。
    Particle Systemオブジェクトがシーンに追加される:
    新しいParticle Systemオブジェクトがシーンに追加され、基本的なパーティクルエミッターが表示されます。
2. Particle Systemの基本コンポーネント
    Particle Systemオブジェクトには、以下のような基本的なコンポーネントと設定が含まれています：
    Particle System コンポーネント: パーティクルのエミッション、形状、速度、寿命、サイズ、色、重力、回転など、多くの属性を制御するための設定オプションが含まれます。主要な設定タブには、Main、Emission、Shape、Velocity over Lifetime、Color over Lifetime、Size over Lifetime などがあります。
3. 基本的な設定の調整
    Mainタブ:
        Duration: パーティクルシステムがアクティブになる時間。
        Looping: ループするかどうか。
        Start Lifetime: パーティクルの寿命。
        Start Speed: パーティクルの初速度。
        Start Size: パーティクルの初期サイズ。
        Start Color: パーティクルの初期色。
        Emissionタブ:
        Rate over Time: 1秒あたりに生成されるパーティクルの数。
        Bursts: 特定のタイミングで大量のパーティクルを生成する設定。
    Shapeタブ:パーティクルの放出形状を決定します。例えば、スフィア、コーン、ボックスなどの形状から選択できます。
    Velocity over Lifetime: パーティクルの寿命にわたる速度の変化。
    ★Velocityは速度を表している。
        Color over Lifetime: パーティクルの寿命にわたる色の変化。
        Size over Lifetime: パーティクルの寿命にわたるサイズの変化。
    Limit Velocity over Lifetime:これ以上に超えないようにねという設定
    Inherit Velocityは、UnityのParticle Systemにおけるモジュールの一つで、パーティクルが親オブジェクトの速度を引き継ぐ度合いを設定するために使用されます。これにより、親オブジェクトの動きに応じてパーティクルの動きをコントロールすることができます。
        Initial: 『生成された時のスピード』を保つ：パーティクルは生成される瞬間にキャラクターの速度を引き継ぎ、キャラクターがジャンプすると同時にパーティクルも上方向に飛び出します：：
        Current:  『親オブジェクトの現在の速度』を引き継ぎます。：パーティクルは車両の速度を常に引き継ぎ、車両が速く移動すると煙も速く移動し、車両が停止すると煙も徐々に止まるような効果を得られます。
    ★親オブジェクトとは？
        親を動かせば子も動く。ヒエラルキーでオブジェクトをフォルダみたいに親子関係にするだけ
    ★ここから下は○○に応じてというパターン
        Color over Lifetime: パーティクルの『寿命』に応じて色の変化。
        Size over Lifetime: パーティクルの『寿命』に応じてサイズの変化。
        Size by Speed: パーティクルの『スピード』によってサイズが変化する
    ☆forceって言ったら力：炎のエフェクトに風の影響を追加する場合：
        Force Fieldオブジェクトの作成:
        空のオブジェクトを作成し、「Particle System Force Field」コンポーネントを追加します。
        例えば、Shapeを「Sphere」、Directionを「0, 1, 0」（上向き）に設定します。
        Gravityを適度な値に設定します（例えば-5）。
        Particle Systemの設定:
        「External Forces」モジュールを有効にします。
        「Influence」に作成したForce Fieldを追加します。
        この設定により、炎のパーティクルはForce Fieldの影響を受け、風によって動くような自然な効果を表現することができます。
        使用例
        炎のエフェクトに外部フォースを追加する場合：
        パーティクルが生成されてから一定時間経過後に上向きの力を受ける設定を行うと、炎が風に吹かれて揺れるような効果が得られます。
        具体的には、Force Over Lifetimeモジュールを使ってY方向に徐々に強くなる力を設定するか、Particle System Force Fieldを使って特定の範囲内で力を加えることができます。
    ☆「Noise」モジュールは、より自然な動きに向けて表現します！
    パーティクルの動きにランダム性を追加するために使用されます。これにより、パーティクルの動きがより自然で有機的に見えるようになります。
    設定例
        以下は、炎のエフェクトにNoiseを追加する際の設定例です：

        Strength: Y方向に1、XとZ方向に0.5。
        Frequency: 0.5。
        Scroll Speed: 0.1。
        Damping: オン。
        Octaves: 3。
    Collesionは？：Unityにおけるコリジョン（Collision）は、物理エンジンを使ってオブジェクト同士の衝突を検出し、処理するための機能です。これにより、ゲーム内のオブジェクトが互いにどのように反応するかを制御できます。コリジョンを設定するためには、Colliderコンポーネントと、必要に応じてRigidbodyコンポーネントをオブジェクトに追加します。
        〇つまり対象は他のオブジェクトってことね
        例）
            キャラクター: プレイヤーやNPC（ノンプレイヤーキャラクター）などの動くオブジェクト。
            障害物: 道路の壁、障害物、障害物などの静的なオブジェクト。
            アイテム: 拾うことができるアイテムやコレクションオブジェクト。
            環境要素: 地面、建物、その他のシーン内の構造物。
            コリジョンの設定例とね
                ChatGPT
        Unityにおけるコリジョンの対象は、ゲーム内の他のオブジェクト
            基本的なコリジョン設定
            1. Colliderコンポーネント
            Colliderは物理的な衝突を検出するためのコンポーネントです。いくつかの基本的なコライダーがあります：
            Box Collider：箱型のコライダー
            Sphere Collider：球形のコライダー
            Capsule Collider：カプセル形のコライダー
            Mesh Collider：メッシュに基づくコライダー
            2. Rigidbodyコンポーネント
            Rigidbodyは物理的な動きを制御するためのコンポーネントで、オブジェクトが重力や物理法則の影響を受けるようにします。Rigidbodyを追加することで、オブジェクトが動的に動き、他のオブジェクトと衝突する際の反応を制御できます。
        ★箱型のコライダーが設定されたオブジェクトが、別のコライダー（例えば、球型やカプセル型のコライダー）が設定されたオブジェクトとぶつかると、衝突が検出されます。
            OnCollisionEnter: コリジョンが始まったときに呼び出されます。
            OnCollisionStay: コリジョンが続いている間、毎フレーム呼び出されます。
            OnCollisionExit: コリジョンが終了したときに呼び出されます。
            OnTriggerEnter: トリガー領域に入ったときに呼び出されます。
            OnTriggerStay: トリガー領域に留まっている間、毎フレーム呼び出されます。
            OnTriggerExit: トリガー領域から出たときに呼び出されます。
        ★似て非なるトリガー
        領域に入る⇒でも衝突するわけではない、何らかのイベントが実行される
        Unityのトリガー（Trigger）は、コライダーの機能の一部で、物理的な衝突を無視して領域への「入り込み」や「出入り」を検出するための仕組みです。トリガー領域にオブジェクトが接触すると、衝突そのものではなく、特定のイベントが発生します。
            1.コリジョン⇒物理的に衝突したら発火
            2.トリガー⇒ある領域に入ったら客家
            3.サブエミッター⇒何かの条件があったら発火
        設定手順
        Colliderを追加

        Hierarchyウィンドウでオブジェクトを選択し、InspectorウィンドウでAdd Componentボタンをクリックします。
        Colliderを検索し、適切なコライダー（例：Box Collider）を選択します。
        Rigidbodyを追加

        動的な物理挙動が必要な場合、同様にAdd Componentボタンをクリックし、Rigidbodyを追加します。
        コリジョンの検出
        コリジョンを検出するためには、スクリプトを使用して衝突イベントを処理します。Unityには、衝突イベントを処理するためのメソッドがいくつか用意されています。

        1. OnCollisionEnter
        オブジェクトが他のオブジェクトと衝突したときに呼び出されます。
            このように設定することで、炎が自然に揺れ動くリアルなエフェクトを作成することができます。
            4. カスタムマテリアルの適用
            パーティクルの見た目をカスタマイズするために、専用のマテリアルを作成し、Particle Systemに適用することができます。例えば、炎や煙のテクスチャを使用してリアルなエフェクトを作成することができます。
            実際の操作手順のスクリーンショット
            Hierarchyウィンドウで右クリックしてParticle Systemを選択
            InspectorウィンドウでParticle Systemの設定を調整
        ★TextureSheetAnimation：アニメーション
            Mode（モード）:
            Grid（グリッド）: スプライトシートを格子状に分割します。各セルが一つのアニメーションフレームになります。
            Sprites（スプライト）: 個別のスプライトを指定してアニメーションを作成します。
            Time Mode（タイムモード）:
            Lifetime（ライフタイム）: パーティクルのライフタイム全体にわたってアニメーションを再生します。
            Speed（スピード）: 再生速度を指定してアニメーションを制御します。
            Frame over Time（フレームオーバータイム）:
            パーティクルのライフタイムに対してフレームの再生位置を設定します。これにより、パーティクルのライフタイムに応じて異なるフレームが表示されます。
            Tiles（タイル）:
            スプライトシートの行数と列数を指定します。これにより、スプライトシートがどのように分割されるかが決まります。
            Start Frame（スタートフレーム）:
            パーティクルのアニメーションがどのフレームから始まるかを設定します。
            Cycle Count（サイクルカウント）:

            パーティクルのライフタイム中にアニメーションを何回繰り返すかを設定します。
            TextureSheetAnimationの設定方法
        ★Light：コンポーネントにどうやって光を当てるか
        ★trail:オブジェクトの動きに沿って軌跡（トレイル）
        ★customdata：
        ★renderer:
            Materials（マテリアル）:
            オブジェクトに適用されるマテリアルを設定します。マテリアルは、オブジェクトの色やテクスチャ、シェーダーを制御します。
            Cast Shadows（影の生成）:
            オブジェクトが影を生成するかどうかを設定します。
            Receive Shadows（影の受け取り）:
            オブジェクトが影を受け取るかどうかを設定します。
            Light Probes（ライトプローブ）:
            オブジェクトがライトプローブからの照明を受け取るかどうかを設定します。
            Reflection Probes（リフレクションプローブ）:
            オブジェクトがリフレクションプローブからの反射を受け取るかどうかを設定します。
            Sorting Layer（ソーティングレイヤー）:
            2Dスプライトの描画順序を制御します。
            Order in Layer（レイヤー内の順序）:
            同じソーティングレイヤー内での描画順序を設定します。
