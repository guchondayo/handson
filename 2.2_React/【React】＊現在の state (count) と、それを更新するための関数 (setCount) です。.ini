【React】＊現在の state (count) と、それを更新するための関数 (setCount) です。

＊現在の state (count) と、それを更新するための関数 (setCount) です。
function MyButton() {
  const [count, setCount] = useState(0);
1.countは現在の値
2.countを更新するにはsetCount(count+1)
3.countの値が更新される！！





1.【Reactのボタン】
function MyButton(props){
    let num = props.defaultNum;
    function addCount(num){
        num = num + 2
    }
    return (
        <button onClick={addCount(num)}>{props.name}</button>
    )
}

<MuButton num={12} name="ああああ" />

2.【JSのボタン】については
大事なこと
1.通常の変数でも値は更新される: 通常の変数を使用する場合でも、後から値を変更することは可能です。これはReactの状態管理機構とは異なりますが、値は更新されます。
2.更新後にログする方法は限られる: JavaScriptで値を更新した後に、それをログに表示する方法にはいくつかの方法がありますが、console.log()が最も一般的です。ただし、これはログに表示されるタイミングに関する制限があります。
3.画面の更新にはDOMに反映させる作業が必要: JavaScriptを使用して値を更新した場合、画面上の表示を更新するためには、DOMを直接操作する必要があります。これはReactではなく、純粋なJavaScriptの機能です。

const button = document.getElementById("addCount")
let num = 12

document.addEventListener("click",()=>{
    num = num +2
    console.log("num",num)
    tag.value = num //＊＊ここがいるよね
})
【React】：Usestateを
★★値をHTMLに返すという作業が必要ない！！！！！！！！！！
大事なこと
＊3を！！！＊useStateで更新しようね
1.通常の変数でも値は更新される: 通常の変数を使用する場合でも、後から値を変更することは可能です。これはReactの状態管理機構とは異なりますが、値は更新されます。
2.更新後にログする方法は限られる: JavaScriptで値を更新した後に、それをログに表示する方法にはいくつかの方法がありますが、console.log()が最も一般的です。ただし、これはログに表示されるタイミングに関する制限があります。
3.画面の更新にはDOMに反映させる作業が必要: JavaScriptを使用して値を更新した場合、画面上の表示を更新するためには、DOMを直接操作する必要があります。これはReactではなく、純粋なJavaScriptの機能です。

function MyButton() {
  const [count, setCount] = useState(0);